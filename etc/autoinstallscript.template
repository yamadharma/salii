#!/bin/sh
#
#   "SystemImager"
#
#   $Id: autoinstallscript.template 4431 2008-03-20 09:35:30Z arighi $
#    vi:set filetype=sh:
#
#   Copyright (C) 1999-2006 Brian Elliott Finley
#
#   28.07.2005 Erich Focht : SCSI device detection and generation of
#                            /a/etc/systemconfig/hardware.lst
#
#   David N. Lombard : Disks enumeration and disk editing
#

##VERSION_INFO##

# Pull in variables left behind by the linuxrc script.
# This information is passed from the linuxrc script on the autoinstall media 
# via /tmp/variables.txt.  Apparently the shell we use in BOEL is not 
# intelligent enough to take a "set -a" parameter.
#
. /tmp/variables.txt

# Load functions and other variables
. /etc/init.d/functions

get_arch

##NO_LISTING##
if [ -z $NO_LISTING ]; then
    VERBOSE_OPT="v"
else
    VERBOSE_OPT=""
fi

##SET_IMAGENAME##
##SET_OVERRIDES##

### BEGIN Check to be sure this not run from a working machine ###
# Test for mounted SCSI or IDE disks
mount | grep [hs]d[a-z][1-9] > /dev/null 2>&1
[ $? -eq 0 ] &&  logmsg Sorry.  Must not run on a working machine... && shellout

# Test for mounted software RAID devices
mount | grep md[0-9] > /dev/null 2>&1
[ $? -eq 0 ] &&  logmsg Sorry.  Must not run on a working machine... && shellout

# Test for mounted hardware RAID disks
mount | grep c[0-9]+d[0-9]+p > /dev/null 2>&1
[ $? -eq 0 ] &&  logmsg Sorry.  Must not run on a working machine... && shellout
### END Check to be sure this not run from a working machine ###


################################################################################
#
#   Stop RAID devices before partitioning begins
#
# Q1) Why did they get started in the first place?  
# A1) So we can pull a local.cfg file off a root mounted software RAID system.
#     They may not be started on your system -- they would only be started if
#     you did the stuff in Q3 below.
#
# Q2) Why didn't my local.cfg on my root mounted software RAID work for me 
#     with the standard kernel flavour?
# A2) The standard kernel flavour uses modules for the software RAID drivers --
#     therefore, software RAID is not available at the point in the boot process
#     where BOEL needs to read the local.cfg file.  They are only pulled over 
#     when this script is run, which is, of course, only runnable if it was
#     pulled over the network using the settings that you would have wanted it
#     to get from the local.cfg file, which it couldn't.  Right?
#
# Q3) Whatever.  So how do I make it work with a local.cfg file on my root
#     mounted software RAID?  
# A3) Compile an autoinstall kernel with software RAID, and any other drivers 
#     you might need built in (filesystem, SCSI drivers, etc.).
#
if [ -f /proc/mdstat ]; then
  RAID_DEVICES=` cat /proc/mdstat | grep ^md | sed 's/ .*$//g' `

  # Turn dem pesky raid devices off!
  for RAID_DEVICE in ${RAID_DEVICES}
  do
    DEV="/dev/${RAID_DEVICE}"
    logmsg "mdadm --manage ${DEV} --stop"
    mdadm --manage ${DEV} --stop
  done
fi
#
################################################################################
# BEGIN disk enumeration
#
# Note the kludgey way to get /dev/sd* and /dev/*/c*d* to sort properly...
#
# Parse the correct file depending by the kernel release -AR-
kernel=`uname -r | sed "s/^\(2\.[64]\).*/\1/"`
if [ $kernel = "2.4" ]; then
    diskfile=/proc/partitions
else
    diskfile=/proc/diskstats
fi 

##SET_DISKORDER##

[ -z $DISKORDER ] || {
  logmsg enumerate_disks
  order=`echo "$DISKORDER" | sed 's/ /,/g' | sed s/,,*/,/g | sed s/^,//`
  DISKS=0
  cdroms=`cat /proc/sys/dev/cdrom/info 2>/dev/null | sed -ne "s/^drive name:[[:space:]]*//p"`
  while : ; do
    [ -z $order ] && break
    type=`expr $order : '\([^,]*\),' \| $order`
    case $type in
    cciss | ida | rd )
      for dev in `cat $diskfile | sed -ne "s/.*\($type\\/c[0-9]d[0-9]\).*/\1/p" | sort -u` ; do
        logmsg " $dev"
        eval DISK$DISKS=/dev/${dev}
        DISKS=`expr $DISKS + 1`
      done
      ;;
    hd | sd | xvd )
      for dev in `cat $diskfile | sed -ne "s/.*\($type[a-z]\+\).*/\1/p" | sort -u` ; do
        skip=0
        for cdrom in $cdroms; do
            if [ "$dev" = "$cdrom" ]; then
                skip=1
                break
            fi
        done
        if [ $skip -eq 0 ]; then
            logmsg " $dev"
            eval DISK$DISKS=/dev/${dev}
            DISKS=`expr $DISKS + 1`
        fi
      done
      ;;
    * )
      logmsg "type='$type'"
      shellout
      ;;
    esac
    order=`expr $order : '[^,]*,\(.*\)'`
  done
  logmsg DISKS=$DISKS
  [ $DISKS -eq 0 ] && {
    beep
    beep
    logmsg ""
    logmsg "NO DISK DEVICE FILES WERE FOUND.  THIS USUALLY MEANS THE KERNEL DID NOT"
    logmsg "RECOGNIZE ANY OF THE ATTACHED DISKS."
    logmsg ""
    logmsg "The kernel boot messages, which preceded this, may indicate why."
    logmsg ""
    logmsg "Reverting to disk configuration specified by image master script."
    DISKORDER=
    logmsg ""
  }
  echo
  beep
}
#
# END disk enumeration
################################################################################

##PARTITION_DISKS##

### BEGIN software-RAID initialization commands -AR- ###
##CREATE_SOFT_RAID_DISKS##
### END software-RAID initialization commands ###

logmsg "Load device mapper driver (for LVM)."
modprobe dm-mod

### BEGIN LVM initialization commands -AR- ###
##INITIALIZE_LVM_PARTITIONS##
### END LVM initialization commands ###

### BEGIN LVM groups creation commands -AR- ###
##CREATE_LVM_GROUPS##
### END LVM groups creation commands ###

### BEGIN LVM volumes creation commands -AR- ###
##CREATE_LVM_VOLUMES##
### END LVM volumes creation commands ###

logmsg "Load additional filesystem drivers."
modprobe ext2
modprobe ext3
modprobe fat
modprobe jfs
modprobe reiserfs
modprobe vfat
modprobe xfs

### BEGIN swap and filesystem creation commands ###
##CREATE_FILESYSTEMS##
### END swap and filesystem creation commands ###

### BEGIN mount proc in image for tools like System Configurator ###
logmsg "mkdir -p /a/proc || shellout"
mkdir -p /a/proc || shellout
logmsg "mount proc /a/proc -t proc -o defaults || shellout"
mount proc /a/proc -t proc -o defaults || shellout
### END mount proc in image for tools like System Configurator ###

if [ ! $kernel = "2.4" ]; then
### BEGIN mount sysfs in image for tools that might be run during chroot ###
logmsg "mkdir -p /a/sys || shellout"
mkdir -p /a/sys || shellout
logmsg "mount sysfs /a/sys -t sysfs -o defaults || shellout"
mount sysfs /a/sys -t sysfs -o defaults || shellout
### END mount sysfs in image for tools that might be run during chroot ###
fi

################################################################################
#
#   Lay the image down on the freshly formatted disk(s)
#
if [ ! -z $MONITOR_SERVER ]; then
    start_report_task
fi

if [ ! -z $FLAMETHROWER_DIRECTORY_PORTBASE ]; then 

    # Use multicast 
    MODULE_NAME="${IMAGENAME}"
    DIR=/a
    RETRY=7
    FLAMETHROWER_TARPIPE=y
    flamethrower_client
    if [ ! -z $MONITOR_SERVER ]; then
        stop_report_task 101
    fi
elif [ "x$BITTORRENT" = "xy" ]; then
    # Use BitTorrent
    if [ -f "${TORRENTS_DIR}/image-${IMAGENAME}.tar.gz.torrent" ]; then
        bittorrent_tarball="image-${IMAGENAME}.tar.gz"
        compress='z'
    elif [ -f "${TORRENTS_DIR}/image-${IMAGENAME}.tar.torrent" ]; then
        bittorrent_tarball="image-${IMAGENAME}.tar"
        compress=''
    else
        logmsg "error: cannot find a valid torrent file for the image ${IMAGENAME}"
        shellout
    fi
    # Evaluate the staging directory
    if [ -z $BITTORRENT_STAGING ]; then
        logmsg bittorrent_autodetect_staging_dir
        BITTORRENT_STAGING=`bittorrent_autodetect_staging_dir ${TORRENTS_DIR}/${bittorrent_tarball}.torrent`
        if [ -z $BITTORRENT_STAGING ]; then
            logmsg ""
            logmsg "error: cannot find a staging directory to save file: $bittorrent_tarball"
            logmsg "Try to increase the size of a partition (like /tmp) in your patitioning schema"
            logmsg "to fit the image into a staging directory."
            logmsg ""
            shellout
        fi
        logmsg "--> staging in: $BITTORRENT_STAGING"
    fi
    # Download image from peers
    logmsg "Start downloading image using torrent ${bittorrent_tarball}.torrent"
    logmsg ""
    logmsg "--> INFO: remember to start /etc/init.d/systemimager-server-bittorrent on the image server!"
    logmsg ""
    bittorrent_get_file ${TORRENTS_DIR}/${bittorrent_tarball}.torrent ${BITTORRENT_STAGING}
    if [ ! -z $MONITOR_SERVER ]; then
        stop_report_task 101
    fi
    # Extract image.
    logmsg "Extracting image from ${bittorrent_tarball} ..."
    (cd /a/ && tar -x${VERBOSE_OPT}${compress}Spf ${BITTORRENT_STAGING}/${bittorrent_tarball} > /dev/console) || shellout

    # Stop BitTorrent client.
    bittorrent_stop
    rm -f ${BITTORRENT_STAGING}/${bittorrent_tarball}
    unset bittorrent_tarball
else 
    # Use rsync 
    if [ $NO_LISTING ]; then
        logmsg "Quietly installing image... "
    fi
    if [ "${TMPFS_STAGING}" = "yes" ]; then 

        # Deposit image into tmpfs
        DIR=/tmp/tmpfs_staging
        logmsg
        logmsg "TMPFS_STAGING=${TMPFS_STAGING} -- Staging in ${DIR}"
        mkdir -p ${DIR}

        logmsg "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ ${DIR}/" 
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids \
              ${IMAGESERVER}::${IMAGENAME}/ ${DIR}/ > /dev/console || shellout 

        if [ ! -z $MONITOR_SERVER ]; then
            stop_report_task 101
        fi

        # Move from staging in tmpfs to disk
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${DIR}/ /a/ > /dev/console || shellout
    else
        logmsg "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ /a/" 
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ /a/ > /dev/console || shellout 
        if [ ! -z $MONITOR_SERVER ]; then
            stop_report_task 101
        fi
    fi
fi 

beep

#
################################################################################


# Leave notice of which image is installed on the client
echo $IMAGENAME > /a/etc/systemimager/IMAGE_LAST_SYNCED_TO || shellout

### BEGIN generate new fstab file from autoinstallscript.conf ###
##GENERATE_FSTAB##
### END generate new fstab file from autoinstallscript.conf ###

################################################################################
#
#   Process override directories
#
for OVERRIDE in $OVERRIDES
do
    if [ ! -z $FLAMETHROWER_DIRECTORY_PORTBASE ]; then
        # Use multicast
        MODULE_NAME="override_${OVERRIDE}"
        DIR=/a
        RETRY=7
        FLAMETHROWER_TARPIPE=y
        flamethrower_client
    elif [ "x$BITTORRENT" = "xy" ]; then
        # Use BitTorrent
        if [ -f "${TORRENTS_DIR}/override-${OVERRIDE}.tar.gz.torrent" ]; then
            bittorrent_tarball="override-${OVERRIDE}.tar.gz"
            compress='z'
        elif [ -f "${TORRENTS_DIR}/override-${OVERRIDE}.tar.torrent" ]; then
            bittorrent_tarball="override-${OVERRIDE}.tar"
            compress=''
        else
            bittorrent_tarball=""
            logmsg "warning: cannot find a valid torrent file for override ${OVERRIDE}"
        fi
        # Evaluate the staging directory
        if [ ! -z $bittorrent_tarball ] && [ -z $BITTORRENT_STAGING ]; then
            logmsg bittorrent_autodetect_staging_dir
            BITTORRENT_STAGING=`bittorrent_autodetect_staging_dir ${TORRENTS_DIR}/${bittorrent_tarball}.torrent`
            if [ -z $BITTORRENT_STAGING ]; then
                logmsg "warning: cannot find a staging directory to save file: $bittorrent_tarball"
                bittorrent_tarball=""
            fi
            logmsg "--> staging in: $BITTORRENT_STAGING"
        fi
        if [ ! -z $bittorrent_tarball ]; then
            # Start downloading
            logmsg "Start downloading override using torrent ${bittorrent_tarball}.torrent"
            logmsg ""
            logmsg "--> INFO: remember to start /etc/init.d/systemimager-server-bittorrent on the image server!"
            logmsg ""
            # Download override from peers
            bittorrent_get_file ${TORRENTS_DIR}/${bittorrent_tarball}.torrent ${BITTORRENT_STAGING}
            # Extract override.
            logmsg "Extracting override from ${bittorrent_tarball} ..."
            (cd /a/ && tar -x${VERBOSE_OPT}${compress}Spf ${BITTORRENT_STAGING}/${bittorrent_tarball} > /dev/console) || shellout
            # Stop BitTorrent client.
            bittorrent_stop
            rm -f ${BITTORRENT_STAGING}/${bittorrent_tarball}
        else
            # Use rsync
            logmsg "trying to download override ${OVERRIDE} with rsync..."
            logmsg "rsync -aIv --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /a/"
            rsync -av --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /a/ > /dev/console || logmsg "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
        fi
        unset bittorrent_tarball
    else
        # Use rsync
        logmsg "rsync -av --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /a/"
        rsync -av --numeric-ids $IMAGESERVER::overrides/$OVERRIDE/ /a/ > /dev/console || logmsg "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
    fi
done

beep

##################################################################
#
# Uncomment the line below to leave your hostname blank.
# Certain distributions use this as an indication to take on the
# hostname provided by a DHCP server.  The default is to have
# SystemConfigurator assign your clients the hostname that
# corresponds to the IP address the use during the install.
# (If you used to use the static_dhcp option, this is your man.)
#
#HOSTNAME=""


################################################################################
#
# mount /dev /a/dev -o bind if needed
#
##BOEL_DEVSTYLE##
#
################################################################################


################################################################################
#
#   Detect scsi hardware and include the device IDs into the hardware.lst
#   file used by systemconfigurator.
#   Use pci-automod for 2.6 kernels, discover for 2.4 kernels.
#
[ ! -d /a/etc/systemconfig ] && mkdir -p /a/etc/systemconfig
if [ -e /tmp/hardware.lst ]; then
    # use previously generated hardware.lst
    cat /tmp/hardware.lst >> /a/etc/systemconfig/hardware.lst
elif [ -d /sys/bus -a -e /lib/modules/`uname -r`/modules.pcimap ]; then
    # use pci-automod to generate hardware.lst
    logmsg "Using pci-automod to generate hardware.lst (this may take a long time):"
    pci-automod --hwlist --class storage --class net --class serial --class bridge > /a/etc/systemconfig/hardware.lst
    logmsg "done"
else
    SCSI_MODS=`discover -f "%m\n" scsi | grep -v ide-scsi | uniq`
    for MOD in $SCSI_MODS; do
        DEVID=`grep $MOD /proc/bus/pci/devices | cut -f 2 | sort | uniq`
        for MYDEV in $DEVID; do
            VENDOR=`echo $MYDEV | cut -b 1-4`
            MODEL=`echo $MYDEV | cut -b 5-8`
            echo "$VENDOR $MODEL scsi $MOD" >> /a/etc/systemconfig/hardware.lst
            logmsg "Added SCSI device $VENDOR:$MODEL using module $MOD to hardware.lst"
        done
    done
fi
#
################################################################################

################################################################################
#
#   System Configurator
#
# Configure the client's hardware, network interface, and boot loader.
#

# Create an /etc/mtab file with appropriate entries
cat /etc/mtab | grep -v '/dev/ram' | grep -v -E '^\/dev\s+\/a\/dev\s' | sed 's,/a/*,/,g' | sort -u > /a/etc/mtab

# Save original boot-loader configurations before running systemconfigurator
for file in /a/boot/grub/menu.lst /a/etc/lilo.conf /a/etc/grub.conf; do
    if [ -e ${file} ]; then
        if [ ! -e ${file}.pre-systemimager ]; then
            cp -f ${file} ${file}.pre-systemimager
        fi
    fi
done

##SYSTEMCONFIGURATOR_PRE##

################################################################################
# BEGIN disk edits
#
[ -z $DISKORDER ] || {
  echo "Editing files for actual disk configuration..."
##SHOW_DISK_EDITS##
  for file in /etc/fstab /etc/systemconfig/systemconfig.conf /boot/grub/menu.lst /etc/lilo.conf /etc/grub.conf /boot/grub/device.map; do
    [ -f /a/$file ] || continue
    echo " $file"
    cp /a/$file /a/$file.image
##EDIT_DISK_NAMES##
  done
  echo
  beep
}
#
# END disk edits
################################################################################

export PATH=/usr/local/sbin:/usr/local/bin:$PATH
logmsg "Detecting systemconfigurator:"
logmsg "---"
chroot /a/ systemconfigurator --version || \
    logmsg "WARNING: systemconfigurator was not found in the image $IMAGENAME"
logmsg "---"

##SYSTEMCONFIGURATOR_POST##

#
################################################################################


################################################################################
#
#   Post Install Scripts
#
run_post_install_scripts
#
################################################################################

################################################################################
#
#   Save virtual console session in the imaged client
#
if [ ! -z $MONITOR_SERVER ]; then
    if [ "x$MONITOR_CONSOLE" = "xy" ]; then
        MONITOR_CONSOLE=yes
    fi
    if [ "x$MONITOR_CONSOLE" = "xyes" ]; then
        [ ! -d /a/root ] && mkdir -p /a/root
        cp -f /tmp/si_monitor.log /a/root/si_monitor.log
    fi
fi

#
################################################################################


################################################################################
#
#   Setup kexec if necessary
#
##SETUP_KEXEC##
#
################################################################################


################################################################################
#
#   Unmount filesystems
#
##UMOUNT_FILESYSTEMS##
#
################################################################################


################################################################################
#
#   Tell the image server we are done
#
rsync $IMAGESERVER::scripts/imaging_complete_$IPADDR > /dev/null 2>&1
logmsg "Imaging completed"
#
################################################################################

if [ ! -z $MONITOR_SERVER ]; then
    # Report the 'imaged' state to the monitor server.
    send_monitor_msg "status=100:speed=0"
    if [ "x$MONITOR_CONSOLE" = "xy" ]; then
        MONITOR_CONSOLE=yes
    fi
    if [ "x$MONITOR_CONSOLE" = "xyes" ]; then
        # Print some empty lines and sleep some seconds to give time to
        # the virtual console to get last messages.
        # XXX: this is a dirty solution, we should find a better way to
        # sync last messages... -AR-
        logmsg ""
        logmsg ""
        logmsg ""
        sleep 10
    fi
    # Report the post-install action.
##MONITOR_POSTINSTALL##
fi

# Explicitly kill sleep processes.
# This is needed to close the SSH tunnel on the image server when the
# SSH transport is used).
killall sleep >/dev/null 2>&1

# Take network interface down
[ -z $DEVICE ] && DEVICE=eth0
ifconfig $DEVICE down || shellout

# Announce completion (even for non beep-incessantly --post-install options)
beep 3

##POSTINSTALL##
