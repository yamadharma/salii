#
#   "SALI"
#
#   Copyright (C) 2010 SARA Computing and Networking Services
#
#   $Id$
#    vi: set filetype=make:
#
# ----
#
#	"SystemImager"
#
#	Copyright (C) 1999-2006 Brian Elliott Finley
#	Copyright (C) 2002-2004 dann frazier <dannf@hp.com>
#
#	Others who have contributed to this code:
#		Sean Dague <sean@dague.net>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

# Location for the files
STAMP_DIR = $(INITRD_SRC_DIR)
INITRD_PATCH_DIR = $(INITRD_DIR)/patches
INITRD_SRC_DIR = $(INITRD_DIR)/src
INITRD_BUILD_DIR = $(INITRD_DIR)/build_dir
INITRD_MAKE_DIR = $(INITRD_DIR)/make.d
INITRD_MAN_DIR = $(INITRD_BUILD_DIR)/usr/share/man
INITRD_SBIN_DIR = $(INITRD_BUILD_DIR)/sbin
INITRD_BIN_DIR = $(INITRD_BUILD_DIR)/bin
export LDFLAGS=-L$(INITRD_BUILD_DIR)/lib
export CFLAGS=-I$(INITRD_BUILD_DIR)/usr/include
export LD_LIBRARY_PATH=$(INITRD_BUILD_DIR)/lib:$LD_LIBRARY_PATH

INITRD_BINARIES = $(shell file \
							initrd/build_dir/bin/* \
							initrd/build_dir/usr/bin/* \
							initrd/build_dir/sbin/* \
							initrd/build_dir/usr/sbin/* \
							| grep -v "text\|symbolic link" \
							| perl -pi -e 's/:.*//')
							#initrd/build_dir/libexec/* \

# Indexing the skel files
SKEL_FILES = $(shell find $(INITRD_DIR)/skel \
						-not -regex '.*/.svn.*' -and \
						-not -regex '.*/.svn')

#
# Order is relevant for certain components, so re-order as is appropriate. -BEF-
#
## BOEL BINARIES
#
include $(INITRD_MAKE_DIR)/bc.rul
include $(INITRD_MAKE_DIR)/e2fsprogs.rul
include $(INITRD_MAKE_DIR)/parted.rul
include $(INITRD_MAKE_DIR)/mdadm.rul
include $(INITRD_MAKE_DIR)/reiserfsprogs.rul
include $(INITRD_MAKE_DIR)/xfsprogs.rul
include $(INITRD_MAKE_DIR)/jfsutils.rul
include $(INITRD_MAKE_DIR)/openssl.rul
include $(INITRD_MAKE_DIR)/openssh.rul
include $(INITRD_MAKE_DIR)/lvm.rul
include $(INITRD_MAKE_DIR)/kerneltools.rul

## Original
include $(INITRD_MAKE_DIR)/busybox.rul
include $(INITRD_MAKE_DIR)/rsync.rul
include $(INITRD_MAKE_DIR)/udev.rul
include $(INITRD_MAKE_DIR)/kexec.rul
include $(INITRD_MAKE_DIR)/aria2.rul
include $(INITRD_MAKE_DIR)/scrub.rul
include $(INITRD_MAKE_DIR)/curl.rul

# HvB 7 Jul 2010
#include $(INITRD_MAKE_DIR)/tar.rul


PHONY += build_dir 
build_dir:	$(INITRD_BUILD_DIR).build


$(INITRD_BUILD_DIR).prep:	$(INITRD_DIR)/initrd.rul
	rm -fr $(INITRD_BUILD_DIR)
	mkdir -p $(INITRD_BUILD_DIR)
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/bin
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/dev
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/ssh
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/sali
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/sali/stubs
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/installer.d
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/startup.d
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/default
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/init.d
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/lib
	test ! -d /lib64 || ( cd $(INITRD_BUILD_DIR) && ln -s lib lib64 )
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/proc
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/root
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/sbin
	mkdir -p -m 1777 $(INITRD_BUILD_DIR)/tmp
	mkdir -p -m 1777 $(INITRD_BUILD_DIR)/log
	mkdir -p -m 1777 $(INITRD_BUILD_DIR)/var/log
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/usr

	#cd $(INITRD_BUILD_DIR)/usr && ln -s ../lib lib

	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/usr/bin
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/usr/sbin
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/var
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/var/run

	#mkdir -p -m 0755 $(INITRD_BUILD_DIR)/lib/udev
	#mkdir -p -m 0755 $(INITRD_BUILD_DIR)/lib/udev/devices

	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty1 c 4 1
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty2 c 4 2
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty3 c 4 3
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty4 c 4 4
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty5 c 4 5
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty6 c 4 6
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 console c 5 1
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 null c 1 3
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 zero c 1 5


	touch $@

#
#XXX I want to make all of the packages install to the build_dir like
#    the .install targets below.  This will push the install logic out
#    to the same place where everything else for a particular tool 
#    happens.  -BEF-
#
$(INITRD_BUILD_DIR).build:  $(INITRD_BUILD_DIR).prep		\
								$(SKEL_FILES) 			\
								$(SRC_DIR)/modules_build-stamp 	\
								$(BUSYBOX_DIR).install 		\
								$(RSYNC_DIR).install 		\
								$(BC_DIR).install 		\
								$(UDEV_DIR).install 		\
								$(E2FSPROGS_DIR).install 	\
								$(LVM_DIR).install		\
								$(PARTED_DIR).install 		\
								$(MDADM_DIR).install 		\
								$(REISERFSPROGS_DIR).install	\
								$(XFSPROGS_DIR).install		\
								$(KERNELTOOLS_DIR).install	\
								$(JFSUTILS_DIR).install		\
								$(KEXEC_DIR).install		\
								$(OPENSSH_DIR).install 		\
								$(ARIA2_DIR).install 		\
								$(SCRUB_DIR).install 		\
								$(CURL_DIR).install

#$(TAR_DIR).install 		\

# Mischien gaat het een en ander hier ook fout HvB
#

	# LVM tools are depend on SELINUX
	#
ifeq ($(ARCH),ppc64)
		cp -a /lib64/libse*   $(INITRD_BUILD_DIR)/lib
		cp -a /lib64/libnss* $(INITRD_BUILD_DIR)/lib
		cp -a /lib64/ld* $(INITRD_BUILD_DIR)/lib

	( \
		cd $(INITRD_BUILD_DIR) && \
		cp `$(COPYLIBS) sbin/modprobe usr/bin/ssh \
			sbin/udevd sbin/mkfs.ext4 sbin/xfs_db usr/sbin/parted \
			usr/bin/aria2c usr/sbin/sshd usr/bin/rsync usr/bin/curl` lib \
	)
else
		cp -a /lib/libse*   $(INITRD_BUILD_DIR)/lib

	( \
		cd $(INITRD_BUILD_DIR) && \
		cp `$(COPYLIBS) sbin/modprobe usr/bin/ssh sbin/lvdisplay \
			sbin/udevd sbin/mkfs.ext4 sbin/xfs_db usr/sbin/parted \
			usr/bin/aria2c usr/sbin/sshd usr/bin/rsync usr/bin/curl` lib \
	)

	# copy libnss files and the loader file.  As they are not automatically included
	#
	ifeq ($(ARCH),x86_64)
		cp -a /lib64/libnss* $(INITRD_BUILD_DIR)/lib
		cp -a /lib64/ld* $(INITRD_BUILD_DIR)/lib
	else
		cp -a /lib/libnss* $(INITRD_BUILD_DIR)/lib
		cp -a /lib/ld* $(INITRD_BUILD_DIR)/lib
		cp -a /lib/libdev* $(INITRD_BUILD_DIR)/lib
	endif
endif

	# Strip 'em. -BEF- HvB
	strip $(INITRD_BINARIES)

	# Copy over text files from the skel directory.
	cp -a $(INITRD_DIR)/skel/* $(INITRD_BUILD_DIR)

	# The following rule gets rid of virtual consoles on 
	# platforms that don't have them.
ifeq ($(ARCH),ppc64-iSeries)
	cat $(INITRD_DIR)/skel/etc/inittab | grep -v ^vc\/ > \
		$(INITRD_BUILD_DIR)/etc/inittab
endif

	install -m 755 $(INITRD_DIR)/skel/etc/init.d/rcS \
	  $(INITRD_BUILD_DIR)/etc/init.d/rcS

	$(INITRD_DIR)/sali/bin/sali_functions --makefile --stubsdir $(INITRD_DIR)/functions/stubs \
	  --tmpfile $(INITRD_DIR)/functions/functions.mbm

	install -m 644 $(INITRD_DIR)/functions/stubs/* $(INITRD_BUILD_DIR)/etc/sali/stubs/

	install -m 755 $(INITRD_DIR)/functions/functions.mbm $(INITRD_BUILD_DIR)/etc/init.d/functions

	install -m 755 $(TOPDIR)/VERSION $(INITRD_BUILD_DIR)/etc/sali_version

	install -m 644 $(INITRD_DIR)/sali/startup.d/* $(INITRD_BUILD_DIR)/etc/startup.d/

	install -m 644 $(INITRD_DIR)/sali/installer.d/* $(INITRD_BUILD_DIR)/etc/installer.d/

	install -m 755 $(INITRD_DIR)/sali/bin/* $(INITRD_BUILD_DIR)/bin

	find $(INITRD_BUILD_DIR) -depth -type d -name .svn | xargs rm -rf

ifeq ($(ARCH),ppc64)
	cp -r /usr/share/terminfo $(INITRD_BUILD_DIR)/etc/terminfo
else
	cp -r /lib/terminfo $(INITRD_BUILD_DIR)/etc/terminfo
endif

	touch $@


PHONY += initrd.img
initrd.img:	$(INITRD_DIR)/initrd.img

$(INITRD_DIR)/initrd.img:       $(INITRD_DIR)/initrd
	bzip2 --best -f $(INITRD_DIR)/initrd
	mv $(INITRD_DIR)/initrd.bz2 $(INITRD_DIR)/initrd.img

PHONY += initrd
initrd:	$(INITRD_DIR)/initrd

#
#	  NOTE:  we don't want the initrd target to use the installed template
#		dir, as it could complicate distribution -- you might have
#		modified files in the template_dir, that aren't removed with a
#		'make install_template_dir', that you don't want released as
#		part of the distribution. -BEF-
#
$(INITRD_DIR)/initrd:	$(INITRD_BUILD_DIR).build
	# Installing kernel modules
	$(MAKE) INSTALL_MOD_PATH=$(INITRD_BUILD_DIR) -C $(LINUX_SRC) -j $(NCPUS) modules_install
	
	cd "${INITRD_BUILD_DIR}" && find . | cpio --quiet -o -H newc > "$(INITRD_DIR)/initrd" || exit 1

PHONY += install_initrd_template
install_initrd_template:	$(INITRD_BUILD_DIR).build
	mkdir -p $(BOOT_BIN_DEST)
	rsync -a $(INITRD_BUILD_DIR)/ $(BOOT_BIN_DEST)/initrd_template/

# install the autoinstall ramdisk - the initial ramdisk used by autoinstall
# clients when beginning an autoinstall
PHONY += install_initrd
install_initrd:	$(INITRD_DIR)/initrd.img
	mkdir -p $(BOOT_BIN_DEST)
	install -m 644 $(INITRD_DIR)/initrd.img \
	    $(BOOT_BIN_DEST)/initrd.img

initrd_get_source:	$(INITRD_SRC_DIR)/$(BUSYBOX_TARBALL) \
			$(INITRD_SRC_DIR)/$(UDEV_TARBALL) \
			$(INITRD_SRC_DIR)/$(UDEV_DIFF) \
			$(INITRD_SRC_DIR)/$(DHCLIENT_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODUTILS_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODULE_INIT_TOOLS_TARBALL) \
			$(INITRD_SRC_DIR)/$(RSYNC_TARBALL) 

PHONY += build_dir_clean
build_dir_clean:
	rm -rf $(INITRD_BUILD_DIR)
	rm -f  $(INITRD_BUILD_DIR).build
	rm -f  $(INITRD_BUILD_DIR).prep

PHONY += initrd_clean
initrd_clean:	build_dir_clean $(subst .rul,_clean,$(shell cd $(INITRD_DIR)/make.d && ls *.rul))
	-find . -name "*~" -exec rm -f {} \;
	rm -f $(INITRD_DIR)/initrd.img
	rm -f $(INITRD_DIR)/functions/functions.mbm

PHONY += initrd_distclean
initrd_distclean:	initrd_clean
	-rm -rf $(INITRD_SRC_DIR)
