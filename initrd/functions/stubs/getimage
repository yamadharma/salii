## Contents of this function has been copied from the master file
getimage_bittorrent(){

    # Use BitTorrent
    if [ -f "${TORRENTS_DIR}/image-${IMAGENAME}.tar.gz.torrent" ]; then
        bittorrent_tarball="image-${IMAGENAME}.tar.gz"
        compress='z'
    elif [ -f "${TORRENTS_DIR}/image-${IMAGENAME}.tar.torrent" ]; then
        bittorrent_tarball="image-${IMAGENAME}.tar"
        compress=''
    else
        logmsg "error: cannot find a valid torrent file for the image ${IMAGENAME}"
        shellout
    fi

    # Evaluate the staging directory
    if [ -z $BITTORRENT_STAGING ]; then
        logmsg bittorrent_autodetect_staging_dir
        BITTORRENT_STAGING=`bittorrent_autodetect_staging_dir ${TORRENTS_DIR}/${bittorrent_tarball}.torrent`
        if [ -z $BITTORRENT_STAGING ]; then
            logmsg ""
            logmsg "error: cannot find a staging directory to save file: $bittorrent_tarball"
            logmsg "Try to increase the size of a partition (like /tmp) in your patitioning schema"
            logmsg "to fit the image into a staging directory."
            logmsg ""
            shellout
        fi
        logmsg "--> staging in: $BITTORRENT_STAGING"
    fi

    # Download image from peers
    logmsg "Start downloading image using torrent ${bittorrent_tarball}.torrent"
    logmsg ""
    logmsg "--> INFO: remember to start /etc/init.d/systemimager-server-bittorrent on the image server!"
    logmsg ""
    bittorrent_get_file ${TORRENTS_DIR}/${bittorrent_tarball}.torrent ${BITTORRENT_STAGING}
    if [ ! -z $MONITOR_SERVER ]; then
        stop_report_task 101
    fi
    # Extract image.
    logmsg "Extracting image from ${bittorrent_tarball} ..."
    cd /a/ || shellout

    case $compress in
        'z')
                zcat ${BITTORRENT_STAGING}/${bittorrent_tarball} | tar -px${VERBOSE_OPT}f -
        ;;

        *)
                tar -px${VERBOSE_OPT}f {BITTORRENT_STAGING}/${bittorrent_tarball}
        ;;
     esac

    rm -f ${BITTORRENT_STAGING}/${bittorrent_tarball}
    unset bittorrent_tarball

}

getimage_rsync(){

    # Use rsync
    if [ "${TMPFS_STAGING}" = "yes" ]; then

        # Deposit image into tmpfs
        DIR=/tmp/tmpfs_staging
        logmsg
        logmsg "TMPFS_STAGING=${TMPFS_STAGING} -- Staging in ${DIR}"
        mkdir -p ${DIR}

        logmsg "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ ${DIR}/"
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids \
              ${IMAGESERVER}::${IMAGENAME}/ ${DIR}/ > /dev/console || shellout

        if [ ! -z $MONITOR_SERVER ]; then
            stop_report_task 101
        fi

        # Move from staging in tmpfs to disk
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --numeric-ids ${DIR}/ /a/ > /dev/console || shellout
    else
        logmsg "rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ /a/"
        rsync -aHS${VERBOSE_OPT} --exclude=lost+found/ --exclude=/proc/* --numeric-ids ${IMAGESERVER}::${IMAGENAME}/ /a/ > /dev/console || shellout
        if [ ! -z $MONITOR_SERVER ]; then
            stop_report_task 101
        fi
    fi


}

getimage(){

	if [ "x$BITTORRENT" = "xy" ]
	then
		getimage_bittorrent
	else
		getimage_rsync
	fi

}
