
#
################################################################################
#
#   Stuff for SSH installs
#


start_sshd() {
    mkdir -p /root/.ssh/ || shellout

    # download ssh authorized_keys if it's not present into the initrd.
    if [ ! -f /root/.ssh/authorized_keys ]; then
        if [ -z $SSH_DOWNLOAD_URL ]; then
            logmsg
            logmsg "authorized_keys shall not be downloaded, but sshd shall be start!"
            logmsg
	else
        	CMD="wget ${SSH_DOWNLOAD_URL}/${ARCH}/ssh/authorized_keys"
	        logmsg
        	logmsg $CMD
	        $CMD || shellout
    
		# set permissions to 600 -- otherwise, sshd will refuse to use it
		chmod 600 /root/.ssh/authorized_keys || shellout
        fi
    fi

    # must be owned by root
    chown -R 0.0 /root/

    # create a private host key for this autoinstall client
    logmsg
    logmsg "Using ssh-keygen to create this hosts private key"
    logmsg
    mkdir -p /var/empty || shellout
    if [ ! -f /etc/ssh/ssh_host_dsa_key ]; then
        ssh-keygen -t dsa -N "" -f /etc/ssh/ssh_host_dsa_key || shellout
    fi
    if [ ! -f /etc/ssh/ssh_host_rsa_key ]; then
        ssh-keygen -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key || shellout
    fi

    # fire up sshd
    mkdir -p /var/run/sshd || shellout
    chmod 0755 /var/run/sshd || shellout
    /usr/sbin/sshd || shellout
    logmsg "sshd started"
    touch /tmp/sshd_started
}

#
################################################################################
#
start_ssh() {

    # create root's ssh dir
    mkdir -p /root/.ssh

    ############################################################################
    #
    # If a private key exists, put it in the right place so this autoinstall
    # client can use it to authenticate itself to the imageserver.
    #
    if [ -e /root/.ssh/id_dsa ]; then
        # (ssh2 dsa style user private key)
        PRIVATE_KEY=/root/.ssh/id_dsa
        chmod 600 $PRIVATE_KEY         || shellout
    elif [ -e /root/.ssh/id_rsa ]; then
        # (ssh2 rsa style user private key)
        PRIVATE_KEY=/root/.ssh/id_rsa
        chmod 600 $PRIVATE_KEY         || shellout
    elif [ -e /floppy/id_dsa ]; then
        # (ssh2 dsa style user private key) from floppy
        PRIVATE_KEY=/root/.ssh/id_dsa
        cp /floppy/id_dsa $PRIVATE_KEY || shellout
        chmod 600 $PRIVATE_KEY         || shellout
    elif [ -e /floppy/id_rsa ]; then
        #
        # (ssh2 rsa style user private key) from floppy
        PRIVATE_KEY=/root/.ssh/id_rsa
        cp /floppy/id_rsa $PRIVATE_KEY || shellout
        chmod 600 $PRIVATE_KEY         || shellout
    fi
    #
    ############################################################################
    # If we have a private key from the media above, go ahead and open secure tunnel
    # to the imageserver and continue with the autoinstall like normal.
    if [ ! -z $PRIVATE_KEY ]; then

        # With the prep ready, start the ssh tunnel connection.
        #
        # Determine if we should run interactive and set redirection options appropriately.
        # So if the key is blank, go interactive. (Suggested by Don Stocks <don_stocks@leaseloan.com>)
        if [ -s $PRIVATE_KEY ]; then
            # key is *not* blank
            REDIRECTION_OPTIONS="> /dev/null 2>&1"
        else
            # key is blank - go interactive
            REDIRECTION_OPTIONS=""
        fi

        # Default ssh user is root.
        [ -z $SSH_USER ] && SSH_USER=root

        CMD="ssh -N -l $SSH_USER -n -f -L873:127.0.0.1:873 $IMAGESERVER $REDIRECTION_OPTIONS"
        logmsg $CMD
        $CMD || shellout

        # Since we're using SSH, change the $IMAGESERVER variable to reflect
        # the forwarded connection.
        IMAGESERVER=127.0.0.1

    else
        ########################################################################
        #
        # Looks like we didn't get a private key so let's just fire up
        # sshd and wait for someone to connect to us to initiate the
        # next step of the autoinstall.
        #
        if [ -z $HOSTNAME ]; then
            logmsg
            logmsg "Trying to get hostname via DNS..."
            logmsg
            get_hostname_by_dns
        fi

        if [ -z $HOSTNAME ]; then
            HOST_OR_IP=$IPADDR
        else
            HOST_OR_IP=$HOSTNAME
        fi

        if [ ! -f /tmp/sshd_started ]; then
            start_sshd
            # Give sshd time to initialize before we yank the parent process
            # rug out from underneath it.
            sleep 15
        fi

        logmsg
        logmsg
        logmsg "Started sshd.  You must now go to your imageserver and issue"
        logmsg "the following command:"
        logmsg
        logmsg " \"si_pushinstall --hosts ${HOST_OR_IP}\"."
        logmsg
        logmsg

        # Since we're using SSH, change the $IMAGESERVER variable to reflect
        # the forwarded connection.
        IMAGESERVER=127.0.0.1

        while [ ! -f /tmp/si_pushupdate.completed ]; do
            sleep 5
        done
    fi
}

