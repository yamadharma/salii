#
# This file is part of SALI
#
# SALI is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SALI is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SALI.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2010-2014 SURFsara

import os
import difflib

from sali import tools

class Rsync(object):

    def __init__(self, cmn):
        self.cmn = cmn
        self.logger = self.cmn.get_logger(__name__+'.Rsync')

        self.logger.info('creating new rsyncd.conf file')
        self.create()

    def __fetch_images(self):
        image_paths = list()
        location = os.path.join(self.cmn.cfg.get('general', 'data_dir'), 'images')
        for path in os.listdir(location):
            image_paths.append((path, os.path.join(location, path)))
        return image_paths

    def __is_config(self, filename):
        if os.path.isfile(filename) and filename.endswith('.conf'):
            return True
        return False

    def create(self):
        location = self.cmn.cfg.get('rsync', 'stubs')

        new_lines = list()

        new_lines.append('# Generated by SALI')
        new_lines.append('')

        ## First load the stubs
        for cfg in sorted(filter(self.__is_config, [ os.path.join(location, f) for f in os.listdir(location) ]), key=tools._generate_index):
            new_lines.append('### %s' % os.path.basename(cfg))
            with open(os.path.join(location, cfg),'r') as fi:
                for line in fi.readlines():
                    new_lines.append(line.strip())
            new_lines.append('')

        ## Then the images
        new_lines.append('### SALI images')
        for image in self.__fetch_images():
            new_lines.append('[%s]' % image[0])
            new_lines.append('    path=%s' % image[1])
        
        new_lines = '\n'.join(new_lines)

        write_file = False
        if os.path.isfile(self.cmn.cfg.get('rsync', 'target')):
            with open(self.cmn.cfg.get('rsync', 'target'), 'r') as fh:
                current_lines = fh.read()

            ## Only when there is a diff, then save the new_lines
            diff = difflib.unified_diff(new_lines, current_lines, lineterm='\n')
            if list(diff):
                write_file = True
        else:
            write_file = True

        if write_file:
            print('Saving generated %s file' % self.cmn.cfg.get('rsync', 'target'))
            with open(self.cmn.cfg.get('rsync', 'target'), 'w') as fh:
                fh.write(new_lines)
        else:
            print('Current %s file is already up to date' % self.cmn.cfg.get('rsync', 'target'))
