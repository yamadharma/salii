# SALI:1.7
#  ^ Required, this is used to check if the master_script is compatible
#    It must be on the firstline of the master script

# An example use of the new master_script
#  required functions; initialize and partition

## Intialize the SALI environment
# required
initialize(){
    ## variables
    SALI_SSHD_KEYS="http://mlt0010.wp.surfsara.nl:8000/ssh_keys.tar"

    ## Where can I find the image (for torrent and rsync), based on the variable PROTOCOL
    ## rsync of bittorrent is used, variables IMAGESERVER and IMAGENAME must be available
    ## via de linux cmd line
    image_torrent "rsync://${SALI_IMAGESERVER}::torrents/image-${SALI_IMAGENAME}.tar.gz.torrent" staging=/a/tmp
    image_rsync "${SALI_IMAGESERVER}::${SALI_IMAGENAME}" options=aHS

    ## Optional you can specify the root password, you must specify the actual passwd encrypted string
    ## BUT we recommend use ssh pub keys!
    #password root '$6$LXAd1TSI0zeMoCW$LPomOOj3ilnrxyl.xtN30kmB0uAFLZo1.C5VtxUdEzXE0MrJp4j7vFMUID/ol31W8bVNSMJYNg/B8R5mmQmB1/'
    ssh_authorized_key root "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCxCMkm+jbeGrSXEFd2uKy+ij19sFdOR+3K6OkDuBT36ZCCNQtnf6S0Wpx5D76vwO+gDn0xtQhxlgET/dzEh276AvZ98KROXEdksy7CE/Vm7Eu2pYZBNc6GnvJUA/qfCzqW/4eD+8bHPuoJpVuftCom3uYaieilsCBz1LUH7Kl4xDiOGAHLsBWqjIn0ghMJmsBul1xpwFVJXWnDQceOlgn/dzAbZFy74Bbz6ShFJ2YM+z9GZd6ZqM0cKrvAb0zqU1tPrDJK0+pNi4nsIL74QPg3N77b50F1v6Hah//w2v8ytXEKvmb18/2RBml6PNXFAzUp5mUQfNImSbhvG/J6vaEp root@install2.irc.sara.nl"
}

## The partition function
# required
partition(){
    ## Detect all disks in the system and make them available
    ## via variables $DISK0, $DISK1, etc. Optionally you can
    ## specify a order in which the disks must be sorted.
    ## For example: disks_detect hd,sd, this means that hd* disk
    ## are sorted before sd* disks
    disks_detect sd,hd      # <order>

    ## Prepare the disks to be used for partitioning (use all for all disk, else
    ## use the $DISK0 variables)
    disks_prep all gpt      # <disks> <msdos|gpt>

    ## Create partitions on specific disks

    ## Syntax required options:
    ##  disk       : disk0, disk1 or complete path to device
    ##  mountpoint : /<path>, swap, none, raid.<id>, pv.<id>
    ##  size       : specify size in MB (-1 means rest of disk)
    ##
    ## Syntax optional options:
    ##  type=<ext2|ext3|ext4|xfs|swap>       currently supported filesystems
    ##  flag=<bios_grub|lvm|raid>            which flag must be set on the partition
    ##                                       when using raid.<id> or lvm.<id> the flag
    ##                                       lvm or raid is optional!
    ##  label=boot                           the label of the partition
    ##  options="-I 128"                     check the man page mkfs.<fstype> for the options
    ##  dirperms=1777                        with which permissions must the mount directory be
    ##
    ##         <disk> <mountpoint> <size> <options>
    disks_part $DISK0 /boot        256    type=ext2 label=boot options="-I 128"
    disks_part $DISK0 swap         4096   type=swap label=swap
    disks_part $DISK0 none         1      flag=bios_grub

    ## Reason for seperate option label= and type= is that not all partitions need this information
    ## such as the bios_grub partition, it only needs a flag, therfore we call it a flag instead
    ## of a partition type. And specifying type=none is to much information.

    ## This is a shell script so you can use logic in your masterscript
    if [ "${DISK1}" ]
    then
        disks_part "${DISK0}" / 51200 type=xfs label=root
        disks_part "${DISK0}" /scratch -1 type=xfs label=scratch dirperms=1777
    else
        disks_part "${DISK0}" / -1 fstype=xfs options="-L root"
        disks_part "${DISK1}" /scratch -1 type=xfs label=scratch dirperms=1777
    fi
}

## A function which is called after fetching the image
# optional
post_installation(){
    # run an shell script in a chrooted environment (by default it looks for scripts in /scripts)
    salichroot $SCRIPT_ROOT/scripts/my_scriptname
}
