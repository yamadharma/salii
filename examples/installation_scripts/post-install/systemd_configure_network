#!/bin/bash
#
#
## The new SALI does not copy the variables to the chroot
#
IMAGESERVER=$1
HOSTS_FILE=/etc/hosts
SALI_INTERFACE_FILE=/tmp/sali_network_interfaces
SYSTEMD_NETWORK_DIR=/etc/systemd/network

declare -A BOND_INTERFACES
declare -A LABEL_2_MAC

ip_prefix_by_netmask()
{
   c=0
   x=0$( printf '%o' ${1//./ } )
   while [ $x -gt 0 ]
   do
       let c+=$((x%2)) 'x>>=1'
   done
   echo /$c
}

function check_default_gateway()
{
   local check_gw=$1
   if [[ "$check_gw" == *"default"* ]]
   then
       echo 1
   else
       echo 0
   fi
}

function create_hosts_file()
{
    cat > ${HOSTS_FILE} << EOF
#
#  Generated by SALI $(date)
#
127.0.0.1   localhost
EOF
}

function get_interface_file()
{
    rsync -a $IMAGESERVER::host_keys/network_interfaces ${SALI_INTERFACE_FILE} > /dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
        echo "Unable to fetch network_interfaces file"
        exit 1
    fi

}

function interface_name_set_by_mac()
{
    local mac=$1
    local label

    label=$(egrep -i "^${mac}" ${SALI_INTERFACE_FILE} | awk '{print $2}')
    [[ -z ${label} ]] && return

    if [[ -f ${SYSTEMD_NETWORK_DIR}/10-${label}.link ]]
    then
        ## m must create a bond with mac address first interface
        BOND_INTERFACES[${label}]="bond-${label}"
        label=${label}_1
    else
        LABEL_2_MAC[${label}]=${mac}
    fi

    cat > ${SYSTEMD_NETWORK_DIR}/10-${label}.link << EOF
[Match]
MACAddress=${mac}

[Link]
Name=${label}
EOF
}

function interface_names()
{
    local net_class_dir=/sys/class/net

    ### clean old definitions
    rm ${SYSTEMD_NETWORK_DIR}/*

    ### Detecting interfaces (except lo)
    for i in $(ls -1 ${net_class_dir})
    do
        case "${i}" in
            lo)
                continue
            ;;
        esac
        if [[ -f ${net_class_dir}/${i}/address ]]
        then
            mac=$(cat ${net_class_dir}/${i}/address)
            interface_name_set_by_mac ${mac}
        fi
    done
}

function network_files()
{
    local l
    local method
    local ip
    local hname

    for l in ${!LABEL_2_MAC[@]}
    do
        method=$(egrep -i ^${LABEL_2_MAC[$l]} ${SALI_INTERFACE_FILE} | awk '{print $3}')
        ip=$(egrep -i ^${LABEL_2_MAC[$l]} ${SALI_INTERFACE_FILE} | awk '{print $5}')
        gateway=$(egrep -i ^${LABEL_2_MAC[$l]} ${SALI_INTERFACE_FILE} | awk '{print $7}')
        hname=$(egrep -i ^${LABEL_2_MAC[$l]} ${SALI_INTERFACE_FILE} | awk '{print $8}')
        netmask=$(egrep -i ^${LABEL_2_MAC[$l]} ${SALI_INTERFACE_FILE} | awk '{print $6}')

        # Save hostname/ip
        echo "${ip}     ${hname}" >> ${HOSTS_FILE}

        case "${method}" in
            dhcp)
                if [[ -v BOND_INTERFACES[${l}] ]]
                then
                    network_file_dhcp_create_bond ${l}
                else
                    network_file_dhcp_create ${l}
                fi
            ;;
            static)
                network_file_static_create ${l} ${ip} ${netmask} ${gateway}
            ;;
        esac
        #iftype=$(egrep -i "^${NETWORKS[$l]}" ${SALI_INTERFACE_FILE} | awk '{print $4}')
    done
}

function network_file_dhcp_create()
{
    label=$1

    cat > ${SYSTEMD_NETWORK_DIR}/${label}-dhcp.network << EOF
[Match]
Name=${label}

[Network]
DHCP=yes
EOF
}

function network_file_dhcp_create_bond()
{
    local label=$1
    local bond_name

    bond_name=${BOND_INTERFACES[${label}]}

### Interface to be used for the bond
##
    cat > ${SYSTEMD_NETWORK_DIR}/${bond_name}-interfaces.network << EOF
[Match]
Name=${label}*

[Network]
Bond=${bond_name}
EOF

### Bond DHCP definition
##
    cat > ${SYSTEMD_NETWORK_DIR}/${bond_name}-dhcp.network << EOF
[Match]
Name=${bond_name}

[Link]
MACAddress=${LABEL_2_MAC[${label}]}
MTUBytes=9000

[Network]
DHCP=yes
EOF

### Bond netdev configuration
##
    cat > ${SYSTEMD_NETWORK_DIR}/${bond_name}.netdev << EOF
[NetDev]
Name=${bond_name}
Kind=bond

[Bond]
Mode=802.3ad
EOF

}

function network_file_static_create()
{
    local label=$1
    local ip=$2
    local netmask=$3
    local gateway=$4
    local fields
    local default_gw
    local cidr


    cidr=$(ip_prefix_by_netmask ${netmask})

    if [[ $(check_default_gateway ${gateway}) -eq 1 ]]
    then
        # put gateway in array
        IFS=\: read -a fields <<<"$gateway"
        default_gw="Gateway=${fields[0]}"
    fi
        cat > ${SYSTEMD_NETWORK_DIR}/${label}-static.network << EOF
[Match]
Name=${label}

[Network]
Address=${ip}${cidr}
${default_gw}
EOF
#
# for reference
#
#    LABEL=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $2}')
#    METHOD=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $3}')
#    IFTYPE=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $4}')
#    IP=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $5}')
#    NETMASK=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $6}')
#    GATEWAY=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $7}')
#    REVERSE=$(egrep -i "^${mac}" /tmp/network_interfaces | awk '{print $8}')
}

function set_hostname()
{
   echo ${HOSTNAME} > /etc/hostname
}

function systemd_network_enable()
{
    [[ -f /etc/network/interfaces ]] && rm /etc/network/interfaces
    systemctl disable networking
    systemctl enable systemd-networkd

    ## set hostname with environment variable from SALI
}

## MAIN
echo "\nConfiguring network interfaces"
get_interface_file
interface_names
create_hosts_file
network_files
systemd_network_enable
set_hostname

echo "\nDone configuring interfaces\n"
exit 0
