#
#	"SystemImager"
#
#   $Id: initrd.rul 4448 2008-04-24 13:38:10Z arighi $
#    vi: set filetype=make:
#
#	Copyright (C) 1999-2006 Brian Elliott Finley
#	Copyright (C) 2002-2004 dann frazier <dannf@hp.com>
#
#	Others who have contributed to this code:
#		Sean Dague <sean@dague.net>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

# Location for the files
STAMP_DIR = $(INITRD_SRC_DIR)
INITRD_PATCH_DIR = $(INITRD_DIR)/patches
INITRD_SRC_DIR = $(INITRD_DIR)/src
INITRD_BUILD_DIR = $(INITRD_DIR)/build_dir
INITRD_MAKE_DIR = $(INITRD_DIR)/make.d
INITRD_MAN_DIR = $(INITRD_BUILD_DIR)/usr/share/man
INITRD_SBIN_DIR = $(INITRD_BUILD_DIR)/sbin
INITRD_BIN_DIR = $(INITRD_BUILD_DIR)/bin

INITRD_BINARIES = $(shell file \
							initrd_source/build_dir/bin/* \
							initrd_source/build_dir/usr/bin/* \
							initrd_source/build_dir/sbin/* \
							initrd_source/build_dir/usr/sbin/* \
							| grep -v "text\|symbolic link" \
							| perl -pi -e 's/:.*//')
							#initrd_source/build_dir/libexec/* \

# Indexing the skel files
SKEL_FILES = $(shell find $(INITRD_DIR)/skel \
						-not -regex '.*/.svn.*' -and \
						-not -regex '.*/.svn')

#
# Order is relevant for certain components, so re-order as is appropriate. -BEF-
#
## BOEL BINARIES
#
include $(INITRD_MAKE_DIR)/bc.rul
include $(INITRD_MAKE_DIR)/e2fsprogs.rul
include $(INITRD_MAKE_DIR)/parted.rul
include $(INITRD_MAKE_DIR)/mdadm.rul
include $(INITRD_MAKE_DIR)/reiserfsprogs.rul
include $(INITRD_MAKE_DIR)/xfsprogs.rul
include $(INITRD_MAKE_DIR)/jfsutils.rul
include $(INITRD_MAKE_DIR)/openssh.rul
include $(INITRD_MAKE_DIR)/openssl.rul
include $(INITRD_MAKE_DIR)/lvm.rul
include $(INITRD_MAKE_DIR)/kerneltools.rul

## Original
include $(INITRD_MAKE_DIR)/cx_freeze.rul
include $(INITRD_MAKE_DIR)/busybox.rul
include $(INITRD_MAKE_DIR)/bittorrent.rul
include $(INITRD_MAKE_DIR)/rsync.rul
#include $(INITRD_MAKE_DIR)/hotplug.rul
include $(INITRD_MAKE_DIR)/sysvinit.rul
include $(INITRD_MAKE_DIR)/udev.rul
include $(INITRD_MAKE_DIR)/kexec.rul


PHONY += build_dir 
build_dir:	$(INITRD_BUILD_DIR).build


$(INITRD_BUILD_DIR).prep:	$(INITRD_DIR)/initrd.rul
	rm -fr $(INITRD_BUILD_DIR)
	mkdir -p $(INITRD_BUILD_DIR)
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/bin
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/dev
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/ssh
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/default
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/etc/init.d
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/lib
	## If build OS has /lib64, create it in initrd
	#test ! -d /lib64 || mkdir -m 755 -p $(INITRD_BUILD_DIR)/lib64
	# If build OS has /lib64, link it to /lib
	test ! -d /lib64 || ( cd $(INITRD_BUILD_DIR) && ln -s lib lib64 )
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/proc
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/root
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/sbin
	mkdir -p -m 1777 $(INITRD_BUILD_DIR)/tmp
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/usr
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/usr/bin
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/usr/sbin
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/var
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/var/run
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/lib/udev
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/lib/udev/devices

	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty1 c 4 1
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty2 c 4 2
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty3 c 4 3
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty4 c 4 4
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty5 c 4 5
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 tty6 c 4 6
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 console c 5 1
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 null c 1 3
	cd $(INITRD_BUILD_DIR)/dev && mknod -m 666 zero c 1 5

	touch $@

#
#XXX I want to make all of the packages install to the build_dir like
#    the .install targets below.  This will push the install logic out
#    to the same place where everything else for a particular tool 
#    happens.  -BEF-
#
$(INITRD_BUILD_DIR).build:  $(INITRD_BUILD_DIR).prep		\
								$(SKEL_FILES) 			\
								$(SRC_DIR)/modules_build-stamp 	\
								$(BUSYBOX_DIR).install 		\
								$(SYSVINIT_DIR).install		\
								$(UDEV_DIR).install 		\
								$(RSYNC_DIR).install 		\
								$(BC_DIR).install 		\
								$(E2FSPROGS_DIR).install 	\
								$(PARTED_DIR).install 		\
								$(MDADM_DIR).install 		\
								$(REISERFSPROGS_DIR).install	\
								$(XFSPROGS_DIR).install		\
								$(KERNELTOOLS_DIR).install		\
								$(JFSUTILS_DIR).install		\
								$(LVM_DIR).install		\
								$(KEXEC_DIR).install		\
								$(OPENSSH_DIR).install 		\
								$(BITTORRENT_DIR).install 	\
								$(CX_FREEZE_BINARY) 		

	# Copy over the standard libs. -BEF-
	cp -a /lib/ld*   $(INITRD_BUILD_DIR)/lib
	test ! -d /lib64 || cp -a /lib64/ld* $(INITRD_BUILD_DIR)/lib64
	# Explicitly include more w/mklibs -L.  -dawild-
ifeq ($(ARCH),x86_64)
	( \
		cd $(INITRD_BUILD_DIR) && \
		$(PYTHON) $(INITRD_DIR)/mklibs -L /lib64:/usr/lib64:/lib:/usr/lib -v -d lib64 ./*bin/* \
	)
	# copy libnss files as they are not automatically included
	cp -a /lib64/libnss* $(INITRD_BUILD_DIR)/lib64
else
	( \
		cd $(INITRD_BUILD_DIR) && \
		$(PYTHON) $(INITRD_DIR)/mklibs -L /lib:/usr/lib:/lib64:/usr/lib64 -v -d lib ./*bin/* \
	)
	# copy libnss files as they are not automatically included
	cp -a /lib/libnss* $(INITRD_BUILD_DIR)/lib
endif
	# Undo prelinking. -AR-
	[ -x `which prelink` ] && (find $(INITRD_BUILD_DIR) -type f -exec prelink -u {} \; 2>&1 | grep -v "does not have .gnu.prelink_undo section\|is not an ELF file") || true

	# Strip 'em. -BEF-
	strip $(INITRD_BINARIES)

	# BitTorrent binaries must not be stripped. -AR-
	cd $(INITRD_BUILD_DIR)/bin && ln -fs ../lib/bittorrent/torrentinfo-console
	cd $(INITRD_BUILD_DIR)/bin && ln -fs ../lib/bittorrent/bittorrent-console

	# Copy over text files from the skel directory.
	cp -a $(INITRD_DIR)/skel/* $(INITRD_BUILD_DIR)

	# The following rule gets rid of virtual consoles on 
	# platforms that don't have them.
ifeq ($(ARCH),ppc64-iSeries)
	cat $(INITRD_DIR)/skel/etc/inittab | grep -v ^vc\/ > \
		$(INITRD_BUILD_DIR)/etc/inittab
endif

	$(SI_INSTALL) -m 755 $(INITRD_DIR)/skel/etc/init.d/rcS \
	  $(INITRD_BUILD_DIR)/etc/init.d/rcS

	$(SI_INSTALL) -m 755 $(INITRD_DIR)/skel/etc/init.d/functions \
	  $(INITRD_BUILD_DIR)/etc/init.d/functions

	# Copy over modules required prior to retrieving the autoinstall
	# binaries tarball. -BEF-
	cp -a $(INITRD_DIR)/my_modules $(INITRD_BUILD_DIR)

	# Clear out SVN cruft.
	find $(INITRD_BUILD_DIR) -depth -type d -name .svn | xargs rm -rf
	mkdir -p $(INITRD_BUILD_DIR)/new_root

	touch $@


PHONY += initrd.img
initrd.img:	$(INITRD_DIR)/initrd.img

$(INITRD_DIR)/initrd.img:       $(INITRD_DIR)/initrd
	gzip -f -S ".img" $(INITRD_DIR)/initrd

PHONY += initrd
initrd:	$(INITRD_DIR)/initrd

#
#	  NOTE:  we don't want the initrd target to use the installed template
#		dir, as it could complicate distribution -- you might have
#		modified files in the template_dir, that aren't removed with a
#		'make install_template_dir', that you don't want released as
#		part of the distribution. -BEF-
#
$(INITRD_DIR)/initrd:	$(INITRD_BUILD_DIR).build
	# Installing kernel modules
	$(MAKE) INSTALL_MOD_PATH=$(INITRD_BUILD_DIR) -C $(LINUX_SRC) -j $(NCPUS) modules_install
	
	# Adding current modules
	#$(MYMODULES) $(INITRD_BUILD_DIR) $(INITRD_BUILD_DIR)/my_modules/INSMOD_COMMANDS

	cd "${INITRD_BUILD_DIR}" && find . | cpio --quiet -o -H newc > "$(INITRD_DIR)/initrd" || exit 1

PHONY += install_initrd_template
install_initrd_template:	$(INITRD_BUILD_DIR).build
	mkdir -p $(BOOT_BIN_DEST)
	rsync -a $(INITRD_BUILD_DIR)/ $(BOOT_BIN_DEST)/initrd_template/

# install the autoinstall ramdisk - the initial ramdisk used by autoinstall
# clients when beginning an autoinstall
PHONY += install_initrd
install_initrd:	$(INITRD_DIR)/initrd.img
	mkdir -p $(BOOT_BIN_DEST)
	$(SI_INSTALL) -m 644 $(INITRD_DIR)/initrd.img \
	    $(BOOT_BIN_DEST)/initrd.img

initrd_get_source:	$(INITRD_SRC_DIR)/$(BUSYBOX_TARBALL) \
			$(INITRD_SRC_DIR)/$(UDEV_TARBALL) \
			$(INITRD_SRC_DIR)/$(UDEV_DIFF) \
			$(INITRD_SRC_DIR)/$(DHCLIENT_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODUTILS_TARBALL) \
			$(INITRD_SRC_DIR)/$(MODULE_INIT_TOOLS_TARBALL) \
			$(INITRD_SRC_DIR)/$(RSYNC_TARBALL) 

PHONY += build_dir_clean
build_dir_clean:
	rm -rf $(INITRD_BUILD_DIR)
	rm -f  $(INITRD_BUILD_DIR).build
	rm -f  $(INITRD_BUILD_DIR).prep

PHONY += initrd_clean
initrd_clean:	build_dir_clean $(subst .rul,_clean,$(shell cd $(INITRD_DIR)/make.d && ls *.rul))
	-find . -name "*~" -exec rm -f {} \;
	rm -f $(INITRD_DIR)/initrd.img

PHONY += initrd_distclean
initrd_distclean:	initrd_clean
	-rm -rf $(INITRD_SRC_DIR)
