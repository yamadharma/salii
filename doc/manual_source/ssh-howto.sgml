<chapter>
  <title>HOWTO Use OpenSSH for Secure Installs</title>
  
  <section>
    <title>
      Using OpenSSH for Secure Installs (requires SystemImager v3.8.x or higher)
    </title>
   
	<para>
            SystemImager supports the ability to capture and install images
            over ssh.  You might want to use this feature if you are doing
            installations in an unprotected network, or over the public
            Internet.  Some amount of scalability and installation time
            degredation is expected, and we currently do not support secure
            multicast (flamethrower) installations.
	</para>
        <para>
            See <ulink url="http://wiki.systemimager.org/index.php/SSH">
            http://wiki.systemimager.org/index.php/SSH
            </ulink> for details.
        </para>
  </section>

  <section>
    <title>
      Image server configuration
    </title>
       <para>
         Uncomment the following 2 lines in <filename>/etc/systemimager/rsync_stubs/10header</filename>:
<programlisting>
  #hosts allow = 127.0.0.1
  #hosts deny = 0.0.0.0/0
</programlisting>
       </para>

       <para>
         Re-run <command>si_mkrsyncd_conf</command>:
<programlisting>
  # si_mkrsyncd_conf
</programlisting>
       </para>

       <para>
        Restart the rsync daemon:
<programlisting>
  # /etc/init.d/systemimager-server-rsyncd restart
</programlisting>
        In this way connections to the rsync exported images will be forbidden
        except from localhost (this will be used by sshd after the SSL tunnel will be
        opened).
       </para>
  </section>

  <section>
    <title>
      Client-driven approach
    </title>
    <para>
First of all you need to create a boot package (kernel + initrd.img) and include
the SSH private key directly into the initrd.img. For this the boot over PXE is
strongly discuraged in this case, because kernel and initrd.img are not
encrypted during the transmission to the clients with TFTP.

To create the boot package with BOEL run the following command:

<programlisting>
  # mkdir /tmp/boot-package
  # si_mkbootpackage --destination /tmp/boot-package --kernel \
    /usr/share/systemimager/boot/i386/standard/kernel --filesystem cramfs \
    --ssh-key ~foo/.ssh/id_dsa --yes
</programlisting>

Remember to replace i386 with the architecture of your clients to get the
correct kernel (e.g. x86_64).

Or if you want to use UYOK:

<programlisting>
  # mkdir /tmp/boot-package
  # si_mkbootpackage --destination /tmp/boot-package --image YOUR_IMAGE \
    --ssh-key ~foo/.ssh/id_dsa --yes
</programlisting>

This command will create the boot package in /tmp/boot-package and it will
include the SSH private key of the user "foo" into the initrd.
To enable the passwordless login for for the user "foo" run the command:

<programlisting>
  $ cat ~foo/.ssh/id_dsa.pub >> ~foo/.ssh/authorized_keys
</programlisting>

In a similar way you can also use the --ssh-key with <command>si_prepareclient</command> in
your golden client. In this case you don't need to create the boot package in
your image server, simply use kernel + initrd.img generated by
<command>si_prepareclient</command>.
    </para>
  </section>

  <section>
    <title>
      Configure the clients to use SSH transport (client-driven)
    </title>
    <para>
Create an autoinstall CD with the following command:

<programlisting>
  # si_mkautoinstallcd --out-file /tmp/boot-package/systemimager.iso --kernel \
    /tmp/boot-package/kernel --initrd /tmp/boot-package/initrd.img --append \
    "MONITOR_SERVER=172.16.36.1 MONITOR_CONSOLE=yes SKIP_LOCAL_CFG=y SSH=y"
</programlisting>

Remember to replace the address of your monitor server (if you want to use it)
and add all the needed installation parameters.

If you prefer to use an auto-install USB drive, instead of a CD run:
<programlisting>
  # si_mkautoinstalldisk --device YOUR_USB_DEVICE --kernel \
    /tmp/boot-package/kernel --initrd /tmp/boot-package/initrd.img --append \
    "MONITOR_SERVER=172.16.36.1 MONITOR_CONSOLE=yes SKIP_LOCAL_CFG=y SSH=y" \
    --yes
</programlisting>

Then boot the clients with the autoinstall CD / USB drive (PXE is not
recommended with client-driven SSH) and enjoy the secure auto-installation.
    </para>
  </section>

  <section>
    <title>
      Server-driven approach
    </title>
    <para>
As well as client-driven approach also the server-driven way needs the creation
of a client boot package. In this case instead of including the SSH private key
(used to connect to the image server), we must include the authorized_keys file,
because it's the image server that will open the SSH tunnels to the clients.

To create a boot package with BOEL run the following command on your image
server:
<programlisting>
  # mkdir /tmp/boot-package
  # si_mkbootpackage --destination /tmp/boot-package --kernel \
    /usr/share/systemimager/boot/i386/standard/kernel --filesystem cramfs \
    --authorized-keys ~foo/.ssh/id_dsa.pub --yes
</programlisting>

Remember to replace i386 with the architecture of your clients to get the
correct kernel (e.g. x86_64).

Or with UYOK:
<programlisting>
  # mkdir /tmp/uyok-boot-package
  # si_mkbootpackage --destination /tmp/boot-package --image YOUR_IMAGE \
    --authorized-keys ~foo/.ssh/id_dsa.pub --yes
</programlisting>

After that you will find the kernel+initrd.img to be used for the imaging into
the destination directory (/tmp/boot-package).
    </para>
  </section>

  <section>
    <title>
      Configure the clients to use the SSH transport (server-driven)
    </title>
    <para>

Be sure to define the SSH=y installation parameter (for more details see:
<ulink url="http://wiki.systemimager.org/index.php/Installation_Parameters">
http://wiki.systemimager.org/index.php/Installation_Parameters
</ulink>).

IMPORTANT: server-driven approach is the most secure way to deploy images
on the clients, because they never access directly to the image server. For this
reason you can forbid every kind of access to the image server (using hosts deny
policy or via iptables or using your preferred firewall...).

Moreover, since you have to distribute only a public key to the clients, you can
ignore the warning of the client-driven approach to not use boot over PXE: in
this case the initrd.img doesn't contain private informations and it can be
transmitted unencrypted without problems!
    </para>
  </section>

  <section>
    <title>
      Wait that the clients become ready to accept SSH connection
    </title>
    <para>

Wait for the following message, that must appear on the clients console:
<programlisting>

  Started sshd.  You must now go to your imageserver and issue
  the following command:
  
  si_pushinstall --hosts ${HOST_OR_IP}.

</programlisting>
If you are not able to physically watch the clients console you can use
monitoring features and check this message from the SystemImager virtual
console (see 
<ulink url="http://wiki.systemimager.org/index.php/Monitoring">
http://wiki.systemimager.org/index.php/Monitoring
</ulink> for more details).

The message above means that the clients are ready to accept SSH connection from
the image server, so just run the command suggested on the console.

You can use also host ranges with si_pushinstall to open all the SSH tunnels in
a single shot. For example if you have to image from node01 up to node20 run:

<programlisting>
  # si_pushinstall --hosts node01-node20
</programlisting>

Then boot the clients with the autoinstall CD / USB drive or via PXE and enjoy
the secure auto-installation.
    </para>
  </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-namecase-general:t
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
